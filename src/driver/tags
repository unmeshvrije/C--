!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ArgumentException	Main.java	/^        ArgumentException(String message) {$/;"	m	class:Main.ArgumentException
ArgumentException	Main.java	/^    private static class ArgumentException extends Exception {$/;"	c	class:Main
BLUE	../ndfs/mcndfs_1_naive/Color.java	/^    CYAN, WHITE, RED, BLUE$/;"	e	enum:Color	file:
CYAN	../ndfs/mcndfs_1_naive/Color.java	/^    CYAN, WHITE, RED, BLUE$/;"	e	enum:Color	file:
Color	../ndfs/mcndfs_1_naive/Color.java	/^public enum Color {$/;"	g
Colors	../ndfs/mcndfs_1_naive/Colors.java	/^    Colors(Map<State, Color> map) {$/;"	m	class:Colors
Colors	../ndfs/mcndfs_1_naive/Colors.java	/^class Colors {$/;"	c
Main	Main.java	/^public class Main {$/;"	c
NNDFS	../ndfs/mcndfs_1_naive/NNDFS.java	/^    public NNDFS(Graph graph, Map<State, Color> colorStore) {$/;"	m	class:NNDFS
NNDFS	../ndfs/mcndfs_1_naive/NNDFS.java	/^public class NNDFS implements NDFS {$/;"	c
RED	../ndfs/mcndfs_1_naive/Color.java	/^    CYAN, WHITE, RED, BLUE$/;"	e	enum:Color	file:
WHITE	../ndfs/mcndfs_1_naive/Color.java	/^    CYAN, WHITE, RED, BLUE$/;"	e	enum:Color	file:
Worker	../ndfs/mcndfs_1_naive/Worker.java	/^    public Worker(final Graph graph, Colors colors)$/;"	m	class:Worker
Worker	../ndfs/mcndfs_1_naive/Worker.java	/^class Worker implements Runnable$/;"	c
color	../ndfs/mcndfs_1_naive/Colors.java	/^    synchronized void color(State state, Color color) {$/;"	m	class:Colors
colors	../ndfs/mcndfs_1_naive/NNDFS.java	/^    private Colors colors; $/;"	f	class:NNDFS	file:
colors	../ndfs/mcndfs_1_naive/Worker.java	/^    Colors colors;$/;"	f	class:Worker
dfsBlue	../ndfs/mcndfs_1_naive/Worker.java	/^    private void dfsBlue(State s) throws Result {$/;"	m	class:Worker	file:
dfsRed	../ndfs/mcndfs_1_naive/Worker.java	/^    private void dfsRed(State s) throws Result {$/;"	m	class:Worker	file:
dispatch	Main.java	/^    private static void dispatch(File file, String version, int nrWorkers)$/;"	m	class:Main	file:
driver	Main.java	/^package driver;$/;"	p
graph	../ndfs/mcndfs_1_naive/NNDFS.java	/^    private Graph graph;$/;"	f	class:NNDFS	file:
graph	../ndfs/mcndfs_1_naive/Worker.java	/^    final Graph graph;$/;"	f	class:Worker
hasColor	../ndfs/mcndfs_1_naive/Colors.java	/^    boolean hasColor(State state, Color color) {$/;"	m	class:Colors
init	../ndfs/mcndfs_1_naive/NNDFS.java	/^    public void init() {}$/;"	m	class:NNDFS
main	Main.java	/^    public static void main(String[] argv) {$/;"	m	class:Main
map	../ndfs/mcndfs_1_naive/Colors.java	/^    private Map<State, Color> map;$/;"	f	class:Colors	file:
ndfs	../ndfs/mcndfs_1_naive/NNDFS.java	/^    public void ndfs() throws Result {$/;"	m	class:NNDFS
ndfs.mcndfs_1_naive	../ndfs/mcndfs_1_naive/Color.java	/^package ndfs.mcndfs_1_naive;$/;"	p
ndfs.mcndfs_1_naive	../ndfs/mcndfs_1_naive/Colors.java	/^package ndfs.mcndfs_1_naive;$/;"	p
ndfs.mcndfs_1_naive	../ndfs/mcndfs_1_naive/NNDFS.java	/^package ndfs.mcndfs_1_naive;$/;"	p
ndfs.mcndfs_1_naive	../ndfs/mcndfs_1_naive/Worker.java	/^package ndfs.mcndfs_1_naive;$/;"	p
nndfs	../ndfs/mcndfs_1_naive/NNDFS.java	/^    private void nndfs(State s) throws Result {$/;"	m	class:NNDFS	file:
printUsage	Main.java	/^    private static void printUsage() {$/;"	m	class:Main	file:
run	../ndfs/mcndfs_1_naive/Worker.java	/^    public void run()$/;"	m	class:Worker
runMCNDFS	Main.java	/^    private static void runMCNDFS(Map<State, ndfs.mcndfs_1_naive.Color> colorStore,$/;"	m	class:Main	file:
runNDFS	Main.java	/^    private static void runNDFS(Map<State, Color> colorStore,$/;"	m	class:Main	file:
serialVersionUID	Main.java	/^        private static final long serialVersionUID = 1L;$/;"	f	class:Main.ArgumentException	file:
state	../ndfs/mcndfs_1_naive/Worker.java	/^    State state;$/;"	f	class:Worker
